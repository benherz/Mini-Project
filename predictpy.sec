# Import necessary libraries 
import numpy as np
import pandas as pd
from sklearn.ensemble import RandomForestClassifier # Binary dependent variable
import joblib 
from sklearn.tree import DecisionTreeClassifier
import shap 
from sklearn.preprocessing import MinMaxScaler, OrdinalEncoder
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
import optparse


def predict(data: pd.DataFrame) -> pd.DataFrame:
    """
    Make predictions on a new dataset.
    
    Args:
    -----
    data: pandas DataFrame
        Data frame with input data. Contains the customernumber as row
        identifyer and the raw features.    
    
    Returns:
    --------
    predictions: pd.DataFrame
        Data frame with a prediction for all customers from the input data.
        Must contain only the columns ['customernumber', 'prediction'],
        where the prediction is either 0 (non-rebuyer, i.e. sent voucher) 
        or 1 (rebuyer, i.e. don't sent voucher).
    
    """

    # Store customernumbers
    customernumbers = data.customernumber

    ### YOUR CODE START ###

    # Set up lists of categorical & continuous features
    cat_features = ["salutation", "title", "domain", "newsletter", "model", "paymenttype", "deliverytype",
                     "voucher", "case", "gift", "entry", "points", "shippingcosts"] 
    cntnous_features = ["numberitems", "weight", "remi", "cancel", "used", "w0", "w1", "w2", "w3", "w4", "w5", "w6", "w7", "w8", "w9", "w10"]

    # Combine into one 
    all_features = cat_features + cntnous_features

    # Load pre-trained transformer
    transformer =  joblib.load('data_transformer.joblib')

    # Construct data to base prediction on 
    x = pd.DataFrame(transformer.transform(data), columns=all_features)

    # Load ML model
    forest = joblib.load("forest_cv2.joblib")

    # Get predictions
    y_pred = forest.predict(x)

    # Some dummy predictions (reference model: send every customer a voucher)
    predictions = pd.DataFrame({
        'customernumber': customernumbers,
        'prediction': y_pred  # Replace with your predictions
    })
    
    ### YOUR CODE END ###

    return predictions


if __name__ == '__main__':

    # Command line arguments
    optParser = optparse.OptionParser()
    optParser.add_option('-i', '--inputfile', action='store', type='string',
                         dest='input_file',
                         help='Filepath of csv file with input data')
    optParser.add_option('-o', '--outputfile', action='store', type='string',
                         dest='output_file',
                         help='Filepath of csv file to write predictions to.')
    opts, args = optParser.parse_args()

    # Read input data
    input_data = pd.read_csv(opts.input_file, sep=';', low_memory=False)

    # Apply prediction function
    predictions = predict(data=input_data)

    # Check if predictions are valid
    if type(predictions) != pd.DataFrame:
        raise ValueError('Predictions must be a data frame. '
                         f'Returned object is of type {type(predictions)}.')
    if set(predictions.columns) != {'customernumber', 'prediction'}:
        raise ValueError('Prediction function must return a data frame with '
                         'columns [\'customernumber\', \'prediction\']')
    if set(predictions.customernumber) != set(input_data.customernumber):
        raise ValueError('Customers must be the same as in input file.')
    if not predictions.prediction.isin([0, 1]).all():
        raise ValueError('All predictions must be either 0 or 1.')

    # Save predictions to output file
    predictions.to_csv(opts.output_file, sep=';', index=False)
